#!/usr/bin/env bash

set -e
set -o pipefail
set -u

BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3
BP_DIR=$(
    cd $(dirname $0)
    cd ..
    pwd
)

if [ -f "${ENV_DIR}/KONG_GIT_URL" ]; then
    KONG_GIT_URL=$(cat ${ENV_DIR}/KONG_GIT_URL)
else
    KONG_GIT_URL="https://github.com/kong/kong.git"
fi

if [ -f "${ENV_DIR}/KONG_GIT_COMMIT" ]; then
    KONG_GIT_COMMIT="${ENV_DIR}/KONG_GIT_COMMIT"
else
    KONG_GIT_COMMIT="5cdce7c19dd7d65e02794c782baf96efbcf4a0f8"
fi

LUAROCKS_VERSION=3.1.3
OPENSSL_VERSION=1.1.1b
OPENRESTY_VERSION=1.15.8.1

KONG_RUNTIME=kong-runtime
APP_PREFIX=/app/$KONG_RUNTIME
mkdir -p $APP_PREFIX
export PATH=$PATH:/sbin

function error() {
    echo " !     $*" >&2
    exit 1
}

function topic() {
    echo "-----> $*"
}

function indent() {
    c='s/^/       /'
    case $(uname) in
    Darwin) sed -l "$c" ;;
    *) sed -u "$c" ;;
    esac
}

APT_CACHE_DIR="$CACHE_DIR/apt/cache"
APT_STATE_DIR="$CACHE_DIR/apt/state"

mkdir -p "$APT_CACHE_DIR/archives/partial"
mkdir -p "$APT_STATE_DIR/lists/partial"

APT_OPTIONS="-o debug::nolocking=true -o dir::cache=$APT_CACHE_DIR -o dir::state=$APT_STATE_DIR"

topic "Updating apt caches"

apt-get $APT_OPTIONS update | indent

for PACKAGE in $(cat $BP_DIR/Aptfile $BUILD_DIR/Aptfile); do
    topic "Install $PACKAGE"
    apt-get $APT_OPTIONS -y --allow-downgrades --allow-remove-essential --allow-change-held-packages -d install --reinstall $PACKAGE | indent
done

mkdir -p $BUILD_DIR/.apt

# cat <<EOF >$BUILD_DIR/.profile.d/000_buildpack_kong.sh
# export PATH="\$HOME/${KONG_RUNTIME}/nginx/sbin:\$HOME/${KONG_RUNTIME}/luajit/bin:\$HOME/${KONG_RUNTIME}/bin:\$HOME/.apt/usr/local/bin:\$HOME/.apt/usr/bin:\$HOME/.apt/usr/sbin:\$PATH"
# export LD_LIBRARY_PATH="\$HOME/${KONG_RUNTIME}/lib:\$HOME/.apt/usr/lib/x86_64-linux-gnu:\$HOME/.apt/usr/local/lib:\$HOME/.apt/usr/lib:/usr/lib/x86_64-linux-gnu:/lib/x86_64-linux-gnu:/usr/lib:\$LD_LIBRARY_PATH"
# export LIBRARY_PATH="\$HOME/${KONG_RUNTIME}/lib:\$HOME/.apt/usr/lib/x86_64-linux-gnu:\$HOME/.apt/usr/local/lib:\$HOME/.apt/usr/lib:/usr/lib/x86_64-linux-gnu:/lib/x86_64-linux-gnu:/usr/lib:\$LIBRARY_PATH"
# export INCLUDE_PATH="\$HOME/${KONG_RUNTIME}/include:\$HOME/.apt/usr/local/include:\$HOME/.apt/usr/include:/usr/include/x86_64-linux-gnu:/usr/include:\$INCLUDE_PATH"
# export CPATH="\$INCLUDE_PATH"
# export CPPPATH="\$INCLUDE_PATH"
# export PKG_CONFIG_PATH="\$HOME/.apt/usr/local/lib/pkgconfig:\$HOME/.apt/usr/lib/x86_64-linux-gnu/pkgconfig:\$HOME/.apt/usr/lib/pkgconfig:\$PKG_CONFIG_PATH"
# export LUA_PATH="\$HOME/lib/?.lua;\$HOME/lib/?/init.lua;\$HOME/.luarocks/share/lua/5.1/?.lua;\$HOME/.luarocks/share/lua/5.1/?/init.lua;\$HOME/${KONG_RUNTIME}/share/lua/5.1/?.lua;\$HOME/${KONG_RUNTIME}/share/lua/5.1/?/init.lua;./?.lua"
# export LUA_CPATH="\$HOME/lib/?.so;\$HOME/.luarocks/lib/lua/5.1/?.so;\$HOME/${KONG_RUNTIME}/lib/lua/5.1/?.so;./?.so"
# EOF

# export PATH="$APP_PREFIX/nginx/sbin:$APP_PREFIX/luajit/bin:$APP_PREFIX/bin:$BUILD_DIR/.apt/usr/local/bin:$BUILD_DIR/.apt/usr/bin:$BUILD_DIR/.apt/usr/sbin:/sbin:$PATH"
# export LD_LIBRARY_PATH="$APP_PREFIX/lib:$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu:$BUILD_DIR/.apt/usr/local/lib:$BUILD_DIR/.apt/usr/lib:/usr/lib/x86_64-linux-gnu:/lib/x86_64-linux-gnu:/usr/lib"
# export LIBRARY_PATH="$APP_PREFIX/lib:$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu:$BUILD_DIR/.apt/usr/local/lib:$BUILD_DIR/.apt/usr/lib:/usr/lib/x86_64-linux-gnu:/lib/x86_64-linux-gnu:/usr/lib"
# export INCLUDE_PATH="$APP_PREFIX/include:$BUILD_DIR/.apt/usr/local/include:$BUILD_DIR/.apt/usr/include:/usr/include/x86_64-linux-gnu:/usr/include"
# export CPATH="$INCLUDE_PATH"
# export CPPPATH="$INCLUDE_PATH"
# export PKG_CONFIG_PATH="$BUILD_DIR/.apt/usr/local/lib/pkgconfig:$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu/pkgconfig:$BUILD_DIR/.apt/usr/lib/pkgconfig"
# export LUA_PATH="$BUILD_DIR/lib/?.lua;$BUILD_DIR/lib/?/init.lua;$BUILD_DIR/.luarocks/share/lua/5.1/?.lua;$BUILD_DIR/.luarocks/share/lua/5.1/?/init.lua;$APP_PREFIX/share/lua/5.1/?.lua;$APP_PREFIX/share/lua/5.1/?/init.lua;./?.lua"
# export LUA_CPATH="$BUILD_DIR/lib/?.so;$BUILD_DIR/.luarocks/lib/lua/5.1/?.so;$APP_PREFIX/lib/lua/5.1/?.so;./?.so"

cd $APP_PREFIX
topic "Build Kong Dependencies"
git clone https://github.com/Kong/openresty-build-tools.git
cd openresty-build-tools
./kong-ngx-build \
    -p buildroot \
    --openresty $OPENRESTY_VERSION \
    --openssl $OPENSSL_VERSION \
    --luarocks $LUAROCKS_VERSION
export PATH="$APP_PREFIX/openresty-build-tools/buildroot/luarocks/bin:$APP_PREFIX/openresty-build-tools/buildroot/openresty/nginx/sbin:$APP_PREFIX/openresty-build-tools/buildroot/openresty/bin:$PATH"
luarocks --version
openresty -v
nginx -v
cd ..

topic "Install Kong"
git clone "$KONG_GIT_URL"
cd kong
git checkout "$KONG_GIT_COMMIT"
make install

ln -s "$(pwd)/bin/kong" /usr/bin/kong
eval "$(luarocks path)"
kong version -vv
cd ..
